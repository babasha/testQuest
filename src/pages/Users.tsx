// src/pages/Users.tsx - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
import { useState, useEffect } from 'preact/hooks'
import { signal } from '@preact/signals'
import './Users.css'
import '../styles/shared.css'
import PhoneIcon from '../icon/phone.svg?url'
import MailIcon from '../icon/mail.svg?url'
import LoupeIcon from '../icon/loupe.svg?url'

export interface User {
  id: number
  name: string
  phone: string
  email: string
  position_name: string
  department: string
  hire_date: string
}

// Signals –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
const users = signal<User[]>([])
const usersLoading = signal<boolean>(true)
const searchQuery = signal<string>('')
const selectedUser = signal<User | null>(null)

const loadUsers = async (term?: string) => {
  usersLoading.value = true
  try {
    const url = term 
      ? `http://localhost:3000?term=${encodeURIComponent(term)}`
      : 'http://localhost:3000'
    
    const response = await fetch(url)
    const data = await response.json()
    
    if (data.success) {
      users.value = data.data
    } else {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data.message)
      users.value = []
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error)
    users.value = []
  } finally {
    usersLoading.value = false
  }
}

const UserModal = ({ user, onClose }: { user: User; onClose: () => void }) => {
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose()
      }
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.body.style.overflow = 'hidden'
    
    document.addEventListener('keydown', handleEscape)
    return () => {
      document.removeEventListener('keydown', handleEscape)
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
      document.body.style.overflow = 'unset'
    }
  }, [onClose])

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h2>{user.name}</h2>
          <button className="close-btn" onClick={onClose}>‚úï</button>
        </div>
        
        <div className="modal-body">
          <div className="user-details-list">
            <div className="detail-row">
              <span className="detail-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
              <span className="detail-value">{user.phone}</span>
            </div>
            
            <div className="detail-row">
              <span className="detail-label">–ü–æ—á—Ç–∞:</span>
              <span className="detail-value">{user.email}</span>
            </div>
            
            <div className="detail-row">
              <span className="detail-label">–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞:</span>
              <span className="detail-value">{user.hire_date}</span>
            </div>
            
            <div className="detail-row">
              <span className="detail-label">–î–æ–ª–∂–Ω–æ—Å—Ç—å:</span>
              <span className="detail-value">{user.position_name}</span>
            </div>
            
            <div className="detail-row">
              <span className="detail-label">–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</span>
              <span className="detail-value">{user.department}</span>
            </div>
            
            <div className="detail-section">
              <h3 className="section-title">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
              <p className="section-content">
                –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–µ–∫—Å—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—è –º–∞–∫—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. 
                –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–µ–∫—Å—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—è –º–∞–∫—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}


const Users = () => {
  const [searchTimeout, setSearchTimeout] = useState<NodeJS.Timeout | null>(null)

  useEffect(() => {
    loadUsers()
  }, [])

  const handleSearch = (e: Event) => {
    const target = e.target as HTMLInputElement
    const value = target.value
    searchQuery.value = value

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
    if (searchTimeout) {
      clearTimeout(searchTimeout)
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è debounce
    const timeout = setTimeout(() => {
      loadUsers(value || undefined)
    }, 300)

    setSearchTimeout(timeout)
  }

  const openUserModal = (user: User) => selectedUser.value = user
  const closeUserModal = () => selectedUser.value = null
  if (usersLoading.value) {
    return (
      <div className="container">
        <div className="loading-spinner">
          ‚ö° –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...
        </div>
      </div>
    )
  }

  return (
    <div className="container">
      <div className="search-header" style={{ margin: '30px 0' }}>
        <div className="search-container search-full-width">
          <input
            type="text"
            className="input input-search"
placeholder=""
            value={searchQuery.value}
            onInput={handleSearch}
          />
          <img src={LoupeIcon} alt="–ü–æ–∏—Å–∫" className="search-icon" />
        </div>
      </div>

      <div className="grid">
        {users.value.map(user => (
          <div key={user.id} className="card user-card" onClick={() => openUserModal(user)}>
            <h3 className="product-name user-name">{user.name}</h3>
            <div className="user-phone"><img src={PhoneIcon} alt="–¢–µ–ª–µ—Ñ–æ–Ω" style={{width: '24px', height: '24px', marginRight: '8px', verticalAlign: 'middle'}} /> {user.phone}</div>
            <div className="user-email"><img src={MailIcon} alt="Email" style={{width: '24px', height: '24px', marginRight: '8px', verticalAlign: 'middle'}} /> {user.email}</div>
          </div>
        ))}
      </div>

      {users.value.length === 0 && searchQuery.value && (
        <div className="empty-state">
          üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "{searchQuery.value}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
          <div style={{ marginTop: '16px' }}>
            <button className="btn btn-primary" onClick={() => {
              searchQuery.value = ''
              loadUsers()
            }}>
              üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            </button>
          </div>
        </div>
      )}

      {users.value.length === 0 && !searchQuery.value && (
        <div className="empty-state">
          üòî –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          <div style={{ marginTop: '16px' }}>
            <button className="btn btn-primary" onClick={() => loadUsers()}>
              üîÑ –û–±–Ω–æ–≤–∏—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      {selectedUser.value && (
        <UserModal user={selectedUser.value} onClose={closeUserModal} />
      )}
    </div>
  )
}

export default Users